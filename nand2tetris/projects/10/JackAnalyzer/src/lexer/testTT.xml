<tokens>
	<symbol>          {  </symbol>
	<symbol>          }  </symbol>
	<symbol>          (  </symbol>
	<symbol>          )  </symbol>
	<symbol>          [  </symbol>
	<symbol>          ]  </symbol>
	<symbol>          .  </symbol>
	<symbol>          ,  </symbol>
	<symbol>          ;  </symbol>
	<symbol>          +  </symbol>
	<symbol>          -  </symbol>
	<symbol>          *  </symbol>
	<symbol>          /  </symbol>
	<symbol>          &amp;  </symbol>
	<symbol>          |  </symbol>
	<symbol>          &lt;   </symbol>
	<symbol>          &gt;   </symbol>
	<symbol>          +  </symbol>
	<symbol>          ~  </symbol>
	<keyword>         class  </keyword>
	<identifier>      main    </identifier>
	<symbol>          {  </symbol>
	<keyword>         field  </keyword>
	<keyword>         static  </keyword>
	<keyword>         int  </keyword>
	<keyword>         boolean  </keyword>
	<keyword>         char  </keyword>
	<identifier>      c    </identifier>
	<symbol>          ,  </symbol>
	<identifier>      d    </identifier>
	<symbol>          ;  </symbol>
	<keyword>         method  </keyword>
	<keyword>         constructor  </keyword>
	<keyword>         function  </keyword>
	<keyword>         void  </keyword>
	<identifier>      func    </identifier>
	<symbol>          (  </symbol>
	<identifier>      a    </identifier>
	<symbol>          ,  </symbol>
	<identifier>      b    </identifier>
	<symbol>          )  </symbol>
	<symbol>          {  </symbol>
	<keyword>         let  </keyword>
	<identifier>      a_b    </identifier>
	<symbol>          =  </symbol>
	<identifier>      greet    </identifier>
	<symbol>          (  </symbol>
	<symbol>          )  </symbol>
	<symbol>          ;  </symbol>
	<keyword>         do  </keyword>
	<identifier>      greet    </identifier>
	<symbol>          (  </symbol>
	<symbol>          )  </symbol>
	<symbol>          ;  </symbol>
	<keyword>         var  </keyword>
	<keyword>         int  </keyword>
	<identifier>      g    </identifier>
	<symbol>          ,  </symbol>
	<identifier>      t    </identifier>
	<symbol>          ;  </symbol>
	<keyword>         true  </keyword>
	<symbol>          ,  </symbol>
	<keyword>         false  </keyword>
	<symbol>          ,  </symbol>
	<keyword>         null  </keyword>
	<symbol>          ;  </symbol>
	<keyword>         return  </keyword>
	<keyword>         this  </keyword>
	<symbol>          ;  </symbol>
	<keyword>         if  </keyword>
	<symbol>          (  </symbol>
	<identifier>      a    </identifier>
	<symbol>          )  </symbol>
	<symbol>          {  </symbol>
	<keyword>         let  </keyword>
	<identifier>      a    </identifier>
	<symbol>          =  </symbol>
	<keyword>         false  </keyword>
	<symbol>          ;  </symbol>
	<symbol>          }  </symbol>
	<keyword>         else  </keyword>
	<symbol>          {  </symbol>
	<keyword>         while  </keyword>
	<symbol>          }  </symbol>
	<keyword>         let  </keyword>
	<identifier>      a    </identifier>
	<symbol>          =  </symbol>
	<integerConstant> 34322  </integerConstant>
	<symbol>          ;  </symbol>
	<keyword>         do  </keyword>
	<identifier>      get    </identifier>
	<symbol>          (  </symbol>
	<integerConstant> 3  </integerConstant>
	<symbol>          ,  </symbol>
	<integerConstant> 5  </integerConstant>
	<symbol>          )  </symbol>
	<symbol>          ;  </symbol>
	<keyword>         let  </keyword>
	<identifier>      str    </identifier>
	<symbol>          =  </symbol>
	<stringConstant>  hey! there  </stringConstant>
	<symbol>          ;  </symbol>
	<keyword>         let  </keyword>
	<identifier>      foo_4_bar    </identifier>
	<symbol>          =  </symbol>
	<stringConstant>  deepsource  </stringConstant>
	<symbol>          ;  </symbol>
	<symbol>          }  </symbol>
	<symbol>          }  </symbol>
	<symbol>          }  </symbol>
</tokens>